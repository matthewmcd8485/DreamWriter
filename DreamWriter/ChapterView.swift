//
//  ChapterView.swift
//  DreamWriter
//
//  Created by Matthew McDonnell on 12/8/24.
//

import SwiftUI

struct ChapterView: View {
    @Bindable var chapter: Chapter // Bindable chapter from the Story model
    @Bindable var story: Story // The parent story for context
    @State private var isLoading = false // Tracks if content is being generated

    var body: some View {
        VStack {
            if isLoading {
                // Show a loading indicator while generating chapter content
                ProgressView("Generating Chapter...")
                    .padding()
            } else if let text = chapter.text {
                // Display the chapter content if it exists
                ScrollView {
                    Text(text)
                        .padding()
                        .font(.body)
                }
            } else {
                // If no text exists and not loading, show a placeholder
                Text("No content available for this chapter yet.")
                    .foregroundColor(.gray)
                    .padding()
            }
        }
        .navigationTitle(chapter.title)
        .navigationBarTitleDisplayMode(.inline)
        .onAppear(perform: loadChapterIfNeeded)
        .padding()
    }

    /// Loads the chapter's text if it hasn't been created yet.
    private func loadChapterIfNeeded() {
        guard chapter.text == nil else { return }
        isLoading = true

        // Simulate API call to generate chapter content
        generateChapter { generatedText in
            DispatchQueue.main.async {
                chapter.text = generatedText
                chapter.isCreated = true
                updateStoryChapter()
                isLoading = false
            }
        }
    }

    /// Simulates generating chapter content using an API (e.g., OpenAI).
    /// Replace this logic with the real API call to generate text.
    private func generateChapter(completion: @escaping (String) -> Void) {
        let mockText = """
        This is the content of the chapter titled '\(chapter.title)' in the story '\(story.title)'.
        Replace this with the actual content generated by the API.
        """
        DispatchQueue.global().asyncAfter(deadline: .now() + 2) {
            completion(mockText)
        }
    }

    /// Updates the parent story with the newly created chapter.
    private func updateStoryChapter() {
        if let index = story.chapters.firstIndex(where: { $0.id == chapter.id }) {
            story.chapters[index] = chapter
        }
    }
}

#Preview {
    // Example preview using mock data
    let mockChapter = Chapter(number: 1, title: "Chapter 1", text: nil, isCreated: false)
    let mockStory = Story(title: "Mock Story", chapters: [mockChapter], prompt: "Test prompt for the test application", isCompleted: false)
    ChapterView(chapter: mockChapter, story: mockStory)
}
